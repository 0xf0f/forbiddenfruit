{"name":"Forbiddenfruit","tagline":"Patch built-in python objects","body":"# Forbidden Fruit\r\n\r\n![Forbidden Fruit](https://raw.github.com/clarete/forbiddenfruit/master/logo.png?login=clarete&token=19afcca33ff63d2ba6b2ef474ad3a12a)\r\n\r\nThis project aims to give you the way to find heaven in tests, but it might\r\nlead you to hell if you use it on production code.\r\n\r\nIt basically allows you to patch built-in objects, declared in C through\r\npython. Just like this:\r\n\r\n```python\r\n>>> from forbiddenfruit import curse\r\n>>> def words_of_wisdom(self):\r\n...     return self * \"blah \"\r\n>>> curse(int, \"words_of_wisdom\", words_of_wisdom)\r\n>>> assert (2).words_of_wisdom() == \"blah blah \"\r\n```\r\n\r\nBoom! That's it, your `int` class now has the `words_of_wisdom` method. Do\r\nyou want to add a `classmethod` to a built-in class? No problem, just do this:\r\n\r\n```python\r\n>>> from forbiddenfruit import curse\r\n>>> def hello(self):\r\n...     return \"blah\"\r\n>>> curse(str, \"hello\", classmethod(hello))\r\n>>> assert str.hello() == \"blah\"\r\n```\r\n\r\n### Reversing a curse\r\n\r\nIf you want to free your object a curse, you can use the `reverse()`\r\nfunction. Just like this:\r\n\r\n```python\r\n>>> from forbiddenfruit import curse, reverse\r\n>>> curse(str, \"test\", \"blah\")\r\n>>> assert 'test' in dir(str)\r\n>>> # Time to reverse the curse\r\n>>> reverse(str, \"test\")\r\n>>> assert 'test' not in dir(str)\r\n```\r\n\r\n## Compatibility\r\n\r\nForbidden Fruit runs on all cpython versions I tested so far, which includes\r\nthe versions 2.5, 2.6, 2.7, 3.2 and 3.3. Since it depends fundamentally on the\r\nC API to implement its basic feature, this library won't work on other python\r\nimplementations such as Jython, pypi, etc.\r\n\r\nI might add support for pypi in the future, but It's unlikely that I'll do it\r\nfor Jython. But I could happily accept patches for them.\r\n\r\n## License\r\n\r\nLicense (GPLv3)\r\n\r\nCopyright (C) 2013  Lincoln Clarete <lincoln@comum.org>\r\n\r\nThis program is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThis program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n### Logo by\r\n\r\nKimberly Chandler, from The Noun Project\r\n","google":"UA-39810341-1","note":"Don't delete this file! It's used internally to help with page regeneration."}